import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { setBrushSize, setAspectRatio, setZoomWidth, alterZoomWidth } from '../../redux/slices/toolSlice';
import Slider from 'rc-slider';
import 'rc-slider/assets/index.css';
import { Plus, Minus, Square, RectangleHorizontal, RectangleVertical, Undo, Redo } from 'lucide-react';
import Button from '@mui/material/Button'; 
import Typography from '@mui/material/Typography';
import { tools } from '../tools/Tools';
import styles from './ToolbarOptions.module.css'; // Make sure this path is correct
import Tooltip from '../tooltip';


// This function is a custom hook that returns the window width
function useWindowWidth() {
  const [isSmallScreen, setIsSmallScreen] = useState(false);

  useEffect(() => {
    function checkSize() {
      setIsSmallScreen(window.innerWidth < 768);
    }
    checkSize(); // Check immediately on mount
    window.addEventListener('resize', checkSize);
    return () => window.removeEventListener('resize', checkSize);
  }, []);

  return isSmallScreen;
}

function ToolbarOptions (props)  {
  const currentToolName = useSelector((state) => state.toolbar.currentToolName);
  const brushSize = useSelector((state) => state.toolbar.brushSize);
  const zoomLevel = useSelector((state) => state.toolbar.zoomWidth);
  const canvasRef = props.canvasRef;

  const currentTool = tools.find(tool => tool.name === currentToolName);
  const dispatch = useDispatch();
  const [selectedAspectRatio, setSelectedAspectRatio] = useState('');
  const hamburgerVisible = useWindowWidth(); // If the screens width is less than 768px, set hamburgerVisible to true(Which means the menu/hamburger icon is visible)

  // Assuming index is still derived from Redux or props as before
  const index = useSelector((state) => (state.history.index-1));

  // This line and related calculations for currentPredictionImage remain as you requested
  const currentPredictionImage = props.predictions && props.predictions.length > index && props.predictions[index]
    ? props.predictions[index].output && props.predictions[index].output.length > 0
      ? props.predictions[index].output[props.predictions[index].output.length - 1]
      : null
    : null;

    
    // Get the current state
const aspectRatioName = useSelector((state) => state.toolbar.aspectRatioName);

  // Calculate aspect ratio from the current prediction if available
  let currentImageAspectRatio = props.predictions && props.predictions.length > index && props.predictions[index]
    ? props.predictions[index].aspectRatioName
    : aspectRatioName; // Default or fallback aspect ratio

// Initialize a local state variable
const [aRatio, setARatio] = useState(aspectRatioName);

  const handleAspectRatioClick = (aspectRatio) => {
    setSelectedAspectRatio(aspectRatio);
      dispatch(setAspectRatio(aspectRatio)); 
  };

  useEffect(() => {
    currentImageAspectRatio = aspectRatioName;
  }, [currentToolName]);

  const handleSliderChange = (value) => {
    dispatch(setBrushSize(value));
  };

  const incrementZoom = () => dispatch(alterZoomWidth(10));
  const decrementZoom = () => dispatch(alterZoomWidth(-10));

  return (
     <div className={styles.toolbarContainer} style={{ position: 'relative' }}>
  {currentTool?.name === 'MaskPainter' && (
  <div className={styles.sliderContainer + " text-white justify-center mx-auto"}
  style={{ 
    width: '100%', 
    padding: '0 20px', 
    marginTop: '1px', // Move everything up
    marginRight: hamburgerVisible ? '-60px' : '0px', // Move everything left if hamburgerVisible is true
    display: 'grid',
    gridTemplateColumns: '1.15fr 1fr', 
    gridTemplateRows: '40px 50px', // Set a fixed height for both rows
    gridTemplateAreas: `
      "undo redo"
      "slider circle"
    `, 
    gap: '1px',
    alignItems: 'start' // Align items to the start of the container, the options are start, center, end, and stretch
  }}>
    {/* Undo button (row 1, col 1) */}
    <Tooltip text="Undo the last brush stroke change">
    <button
      onClick={() => canvasRef.current.UndoLastMaskLine()}
      className="bg-blue-500 hover:bg-blue-700 text-white font-bold rounded"
      style={{
        gridArea: 'undo',
        justifySelf: 'start', // Align to the start of the grid area
        alignSelf: 'end', // Move down within the grid area
        padding: '5px 10px', // Reduced padding
        fontSize: '0.75rem', // Smaller font size
        width: 'fit-content' // Make width fit the content
      }}
    >
      <Undo/>
    </button>
    </Tooltip>

    {/* Redo button (row 1, col 2) */}
    <Tooltip text="Redo the last brush stroke change">
    <button
      onClick={() => canvasRef.current.RedoLastMaskLine()}
      className="bg-blue-500 hover:bg-blue-700 text-white font-bold rounded"
      style={{
        gridArea: 'redo',
        justifySelf: 'end', // Align to the end of the grid area
        alignSelf: 'end', // Move down within the grid area
        padding: '5px 10px', // Reduced padding
        fontSize: '0.75rem', // Smaller font size
        width: 'fit-content' // Make width fit the content
      }}
    >
      <Redo/>
    </button>
    </Tooltip>

    {/* Slider (row 2, col 1) */}
    <div style={{
      gridArea: 'slider',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'start' // Move up within the grid area
    }}>
      <Tooltip text="changes the size of the masking brush's stroke">
      <label htmlFor="brushSize" className="flex-shrink-0 mb-2">Brush Size</label>
      <Slider
        min={1}
        max={100}
        value={brushSize}
        onChange={handleSliderChange}
        railStyle={{ backgroundColor: '#eaeaea', height: 8 }}
        trackStyle={{ backgroundColor: '#007bff', height: 8 }}
        handleStyle={{
          borderColor: '#007bff',
          height: 20,
          width: 20,
          marginTop: -6,
          backgroundColor: '#007bff',
        }}
      />
      </Tooltip>
    </div>

    {/* Brush size indicator (row 2, col 2) */}
    <Tooltip text="the size of the masking brush's stroke">
    <div style={{ 
      gridArea: 'circle', 
      position: 'relative', // Set the position to relative
      display: 'flex', 
      justifyContent: 'center', 
      alignItems: 'center'
    }}>
      <div
        style={{
          position: 'absolute', // Position absolutely to center it based on transform
          marginTop: '5px', // Move the circle down
          marginLeft: !hamburgerVisible ? '40px' : '0px', // Move everything left if hamburgerVisible is true
          top: '50%', // Set top to 50%
          left: '50%', // Set left to 50%
          transform: 'translate(-50%, -50%)', // Use transform to center the circle
          width: `${brushSize}px`,
          height: `${brushSize}px`,
          borderRadius: '50%', // Makes the div a circle
          backgroundColor: 'white',
        }}
      />
    </div>
    </Tooltip>
  </div>
)}






      {/**********************************************************************/}
      
      {currentTool?.name === 'Zoom' && (
        <div className="styles.zoomContainer text-black flex items-center justify-center mx-auto">
          <button onClick={decrementZoom} className="zoom-button">
            <Minus />
          </button>
          <input
            type="number"
            value={zoomLevel}
            onChange={(e) => dispatch(setZoomWidth(e.target.value))}
            className="zoom-input"
          />
          <button onClick={incrementZoom} className="zoom-button">
            <Plus />
          </button>
        </div>
      )}

      {/**********************************************************************/}

   {currentTool?.name === 'AspectRatio' && (
    <div
      className={styles.aspectRatioContainer + ' text-white flex flex-wrap justify-center mx-auto'}
      style={{ width: '100%', padding: '0 20px' }}
    >
      <div className="flex flex-col items-center">
        <Button
          style={{ margin: '5px' }}
          variant="contained"
          onClick={() => handleAspectRatioClick('1:1')}
          startIcon={<Square />}
          size="large"
          className={`${styles.button} ${selectedAspectRatio === '1:1' ? styles.selectedButton : ''}`}
        >
          <Typography>1:1</Typography>
        </Button>

        <Typography className="text-center mt-2">Current Image: {currentImageAspectRatio} </Typography>

      </div>

      <div className="flex flex-col items-center" style={{ marginLeft: '20px', marginRight: '20px' }}>
        <Button
          style={{ margin: '5px' }}
          variant="contained"
          onClick={() => handleAspectRatioClick('16:9')}
          startIcon={<RectangleHorizontal />}
          size="large"
          className={`${styles.button} ${selectedAspectRatio === '16:9' ? styles.selectedButton : ''}`}
        >
          <Typography>16:9</Typography>
        </Button>

        <Button
          style={{ margin: '5px' }}
          variant="contained"
          onClick={() => handleAspectRatioClick('9:16')}
          startIcon={<RectangleVertical />}
          size="large"
          className={`${styles.button} ${selectedAspectRatio === '9:16' ? styles.selectedButton : ''}`}
        >
          <Typography>9:16</Typography>
        </Button>
      </div>

      <div className="flex flex-col items-center">
        <Button
          style={{ margin: '5px' }}
          variant="contained"
          onClick={() => handleAspectRatioClick('4:3')}
          startIcon={<RectangleHorizontal style={{ transform: 'scale(1.5)' }} />}
          size="large"
          className={`${styles.button} ${selectedAspectRatio === '4:3' ? styles.selectedButton : ''}`}
        >
          <Typography>4:3</Typography>
        </Button>

        <Button
          variant="contained"
          style={{ margin: '5px' }}
          onClick={() => handleAspectRatioClick('3:4')}
          startIcon={<RectangleVertical style={{ transform: 'scale(1.5)' }} />}
          size="large"
          className={`${styles.button} ${selectedAspectRatio === '3:4' ? styles.selectedButton : ''}`}
        >
          <Typography>3:4</Typography>
        </Button>
      </div>
    </div>
  )}


  </div>
  )
};

export default ToolbarOptions;
