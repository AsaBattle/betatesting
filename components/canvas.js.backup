/* before gpt had it doing this inside of the return statement
{currentImage && (
  <Image
      src={currentImage}
      alt="Current Canvas Content"
      layout="fill"
      className="absolute z-10"
  />
)}
But that messes it up when undo is executed, just doesn't work right. The version of it is below but commented out
*/
import React, { useRef, useState, useEffect } from 'react';
import Image from 'next/image';
import { ReactSketchCanvas } from 'react-sketch-canvas';
import { useSelector } from 'react-redux';
import Spinner from 'components/spinner';
import { tools } from './tools/Tools'; // Adjust the import path as necessary

const Canvas = (props) => {
  const canvasRef = useRef(null);
  const canvasStateRef = useRef(''); // Initialize with an empty string or appropriate initial state
  const [allowDrawing, setAllowDrawing] = useState(true);

  // Retrieve the current image from Redux store
  const currentImage = useSelector((state) => state.history.currentImage);
  const currentToolName = useSelector((state) => state.toolbar.currentToolName);
  const currentTool = tools.find(tool => tool.name === currentToolName);
  const index = useSelector((state) => state.history.index);
  //const currentPredictionImage = props.predictions.length > index ? props.predictions[index].output : null;
const currentPredictionImage = props.predictions && props.predictions.length > index
  ? props.predictions[index].output && props.predictions[index].output.length > 0
    ? props.predictions[index].output[props.predictions[index].output.length - 1]
    : null
  : null;

// Then, use this safely checked currentPredictionImage in your useEffect
useEffect(() => {
  console.log('Index:', index);
  console.log('Predictions:', props.predictions);
  console.log('Current Prediction Image:', currentPredictionImage);
}, [index, props.predictions, currentPredictionImage]);

  useEffect(() => {
    if (!currentTool) {
      console.error('Current tool is not defined.');
      return;
    }

    console.log("Inside Canvas.js useEffect currentTool.name: " + currentTool.name);
  
    setAllowDrawing(currentToolName === 'MaskPainter');
  
    const canvasContainer = document.getElementById('canvasContainer');
    if (!canvasContainer) {
      console.error('Canvas container id not found');
      return;
    }
    canvasContainer.style.cursor = currentTool.cursor;
  }, [currentToolName]);

  // Process predictions to add lastImage property
  const processedPredictions = props.predictions.map(prediction => ({
    ...prediction,
    lastImage: prediction.output ? prediction.output[prediction.output.length - 1] : null,
  }));

// Handle the change event for the canvas
const onChange = async () => {
  const paths = await canvasRef.current.exportPaths();
  if (paths.length) {
    const data = await canvasRef.current.exportImage('svg');
    if (data !== canvasStateRef.current) {
      // Push the current state to undo stack before updating, but only if we want to save the current image evert time the user hits the mouse(meaning when the canvas changes)
      // dispatch(pushToUndo(canvasStateRef.current));
      canvasStateRef.current = data;
    }
    props.onDraw(data);
  }
};

  const predicting = processedPredictions.some(prediction => !prediction.output);
  const lastPrediction = processedPredictions[processedPredictions.length - 1];

  return (
    <div className="relative w-full aspect-square" id="canvasContainer" style={{
      cursor: `url('/pen-cursor(w)2.png'), auto`
    }}
>
        {/* PREDICTION IMAGES 
        {!props.userUploadedImage && processedPredictions.filter(prediction => prediction.output).map((prediction, index) => (
            <Image
                alt={`prediction ${index}`}
                key={`prediction ${index}`}
                layout="fill"
                className="absolute animate-in fade-in"
                style={{ zIndex: index }}
                src={prediction.lastImage}
            />
        ))}*/}
        {/* PREDICTION IMAGE */}
        {currentPredictionImage && (
            <Image
                alt={`Current prediction ${index}`}
                layout="fill"
                className="absolute animate-in fade-in"
                style={{ zIndex: 100 }}  // Make sure to set a proper z-index
                src={currentPredictionImage}
            />
        )}

        {/* USER UPLOADED IMAGE */}
        {props.userUploadedImage && (
            <Image
                src={props.userUploadedImage}
                alt="User uploaded"
                layout="fill"
            />
        )}

        {/* SPINNER */}
        {predicting && (
            <div
                className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
                style={{ zIndex: processedPredictions.length + 100 }}
            >
                <div className="p-4 w-40 bg-white text-center rounded-lg animate-in zoom-in">
                    <Spinner />
                    <p className="pt-3 opacity-30 text-center text-sm">
                        {lastPrediction.status}
                    </p>
                </div>
            </div>
        )}
{/* CANVAS FOR DRAWING */}
{(processedPredictions.length > 0 || props.userUploadedImage) && !predicting && (
        <div
          className="absolute top-0 left-0 w-full h-full"
          style={{ zIndex: processedPredictions.length + 100 }}
        >
          <ReactSketchCanvas
            ref={canvasRef}
            strokeWidth={props.brushSize}
            strokeColor="white"
            canvasColor="transparent"
            onChange={onChange}
            allowOnlyPointerType={allowDrawing ? 'all' : 'none'}
          />
            </div>
        )}
    </div>
);
};

export default Canvas;


/*
with displaying the current image, but this doesn't work right
import React, { useRef, useState, useEffect } from 'react';
import Image from 'next/image';
import { ReactSketchCanvas } from 'react-sketch-canvas';
import { useSelector } from 'react-redux';
import Spinner from 'components/spinner';
import { tools } from './tools/Tools'; // Adjust the import path as necessary

const Canvas = (props) => {
    const canvasRef = useRef(null);
    const [allowDrawing, setAllowDrawing] = useState(true);

    const currentImage = useSelector((state) => state.history.currentImage);
    const currentToolName = useSelector((state) => state.toolbar.currentToolName);
    const currentTool = tools.find(tool => tool.name === currentToolName);

    useEffect(() => {
        if (!currentTool) {
            console.error('Current tool is not defined.');
            return;
        }

        console.log("Inside Canvas.js useEffect currentTool.name: " + currentTool.name);

        setAllowDrawing(currentToolName === 'MaskPainter');

        const canvasContainer = document.getElementById('canvasContainer');
        if (!canvasContainer) {
            console.error('Canvas container id not found');
            return;
        }
        canvasContainer.style.cursor = currentTool.cursor;
    }, [currentToolName]);

    const processedPredictions = props.predictions.map(prediction => ({
        ...prediction,
        lastImage: prediction.output ? prediction.output[prediction.output.length - 1] : null,
    }));

    const predicting = processedPredictions.some(prediction => !prediction.output);
    const lastPrediction = processedPredictions[processedPredictions.length - 1];

    return (
        <div className="relative w-full aspect-square" id="canvasContainer">
            {currentImage && (
              <Image
                  src={currentImage}
                  alt="Current Canvas Content"
                  layout="fill"
                  className="absolute z-10"
              />
          )}

          {!props.userUploadedImage && processedPredictions.filter(prediction => prediction.output).map((prediction, index) => (
              <Image
                  alt={`prediction ${index}`}
                  key={`prediction ${index}`}
                  layout="fill"
                  className="absolute animate-in fade-in"
                  style={{ zIndex: index }}
                  src={prediction.lastImage}
              />
          ))}

          {props.userUploadedImage && (
              <Image
                  src={props.userUploadedImage}
                  alt="User uploaded"
                  layout="fill"
              />
          )}

          {predicting && (
              <div
                  className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
                  style={{ zIndex: processedPredictions.length + 100 }}
              >
                  <div className="p-4 w-40 bg-white text-center rounded-lg animate-in zoom-in">
                      <Spinner />
                      <p className="pt-3 opacity-30 text-center text-sm">
                          {lastPrediction.status}
                      </p>
                  </div>
              </div>
          )}

          {(processedPredictions.length > 0 || props.userUploadedImage) && !predicting && (
              <div
                  className="absolute top-0 left-0 w-full h-full"
                  style={{ zIndex: processedPredictions.length + 100 }}
              >
                  <ReactSketchCanvas
                      ref={canvasRef}
                      strokeWidth={props.brushSize}
                      strokeColor="white"
                      canvasColor="transparent"
                      allowOnlyPointerType={allowDrawing ? 'all' : 'none'}
                  />
              </div>
          )}
      </div>
  );
};

export default Canvas;


with onchange
import React, { useRef, useState, useEffect } from 'react';
import Image from 'next/image';
import { ReactSketchCanvas } from 'react-sketch-canvas';
import { useSelector, useDispatch } from 'react-redux';
import Spinner from 'components/spinner';
import { tools } from './tools/Tools'; // Adjust the import path as necessary

const Canvas = (props) => {
  const canvasRef = useRef(null);
  const canvasStateRef = useRef(''); // Initialize with an empty string or appropriate initial state
  const [allowDrawing, setAllowDrawing] = useState(true);
  const dispatch = useDispatch();

  const currentToolName = useSelector((state) => state.toolbar.currentToolName);
  const currentTool = tools.find(tool => tool.name === currentToolName);

  useEffect(() => {
    if (!currentTool) {
      console.error('Current tool is not defined.');
      return;
    }

    console.log("Inside Canvas.js useEffect currentTool.name: " + currentTool.name);
  
    // Enable or disable drawing based on the current tool
    setAllowDrawing(currentToolName === 'MaskPainter');
  
    // Determine cursor style based on the tool
    let cursorStyle = 'default';
    const canvasContainer = document.getElementById('canvasContainer');
    if (!canvasContainer) {
      console.error('Canvas container id not found');
      return;
    }
  
      cursorStyle = currentTool.cursor;
  
    canvasContainer.style.cursor = cursorStyle;
  }, [currentToolName]);

  // Handle the change event for the canvas
  const onChange = async () => {
    const paths = await canvasRef.current.exportPaths();
    if (paths.length) {
      const data = await canvasRef.current.exportImage('svg');
      if (data !== canvasStateRef.current) {
        // Push the current state to undo stack before updating, but only if we want to save the current image evert time the user hits the mouse(meaning when the canvas changes)
        // dispatch(pushToUndo(canvasStateRef.current));
        canvasStateRef.current = data;
      }
      props.onDraw(data);
    }
  };
  // Process predictions to add lastImage property
  const processedPredictions = props.predictions.map(prediction => ({
    ...prediction,
    lastImage: prediction.output ? prediction.output[prediction.output.length - 1] : null,
  }));

  const predicting = processedPredictions.some(prediction => !prediction.output);
  const lastPrediction = processedPredictions[processedPredictions.length - 1];

  return (
    <div className="relative w-full aspect-square" id="canvasContainer" style={{
      cursor: `url('/pen-cursor(w)2.png'), auto`
    }}
>
        {!props.userUploadedImage && processedPredictions.filter(prediction => prediction.output).map((prediction, index) => (
          <Image
              alt={`prediction ${index}`}
              key={`prediction ${index}`}
              layout="fill"
              className="absolute animate-in fade-in"
              style={{ zIndex: index }}
              src={prediction.lastImage}
          />
      ))}

      {props.userUploadedImage && (
          <Image
              src={props.userUploadedImage}
              alt="User uploaded"
              layout="fill"
          />
      )}

      {predicting && (
          <div
              className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
              style={{ zIndex: processedPredictions.length + 100 }}
          >
              <div className="p-4 w-40 bg-white text-center rounded-lg animate-in zoom-in">
                  <Spinner />
                  <p className="pt-3 opacity-30 text-center text-sm">
                      {lastPrediction.status}
                  </p>
              </div>
          </div>
      )}
{(processedPredictions.length > 0 || props.userUploadedImage) && !predicting && (
      <div
        className="absolute top-0 left-0 w-full h-full"
        style={{ zIndex: processedPredictions.length + 100 }}
      >
        <ReactSketchCanvas
          ref={canvasRef}
          strokeWidth={props.brushSize}
          strokeColor="white"
          canvasColor="transparent"
          onChange={onChange}
          allowOnlyPointerType={allowDrawing ? 'all' : 'none'}
        />
          </div>
      )}
  </div>
);
};

export default Canvas;


*/